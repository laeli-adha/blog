/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Transactions } from "./Transactions";
import { TransactionsCountArgs } from "./TransactionsCountArgs";
import { TransactionsFindManyArgs } from "./TransactionsFindManyArgs";
import { TransactionsFindUniqueArgs } from "./TransactionsFindUniqueArgs";
import { CreateTransactionsArgs } from "./CreateTransactionsArgs";
import { UpdateTransactionsArgs } from "./UpdateTransactionsArgs";
import { DeleteTransactionsArgs } from "./DeleteTransactionsArgs";
import { Category } from "../../category/base/Category";
import { User } from "../../user/base/User";
import { Wallet } from "../../wallet/base/Wallet";
import { TransactionsService } from "../transactions.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Transactions)
export class TransactionsResolverBase {
  constructor(
    protected readonly service: TransactionsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Transactions",
    action: "read",
    possession: "any",
  })
  async _transactionsItemsMeta(
    @graphql.Args() args: TransactionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Transactions])
  @nestAccessControl.UseRoles({
    resource: "Transactions",
    action: "read",
    possession: "any",
  })
  async transactionsItems(
    @graphql.Args() args: TransactionsFindManyArgs
  ): Promise<Transactions[]> {
    return this.service.transactionsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Transactions, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Transactions",
    action: "read",
    possession: "own",
  })
  async transactions(
    @graphql.Args() args: TransactionsFindUniqueArgs
  ): Promise<Transactions | null> {
    const result = await this.service.transactions(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Transactions)
  @nestAccessControl.UseRoles({
    resource: "Transactions",
    action: "create",
    possession: "any",
  })
  async createTransactions(
    @graphql.Args() args: CreateTransactionsArgs
  ): Promise<Transactions> {
    return await this.service.createTransactions({
      ...args,
      data: {
        ...args.data,

        categoryId: {
          connect: args.data.categoryId,
        },

        userId: args.data.userId
          ? {
              connect: args.data.userId,
            }
          : undefined,

        walletId: {
          connect: args.data.walletId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Transactions)
  @nestAccessControl.UseRoles({
    resource: "Transactions",
    action: "update",
    possession: "any",
  })
  async updateTransactions(
    @graphql.Args() args: UpdateTransactionsArgs
  ): Promise<Transactions | null> {
    try {
      return await this.service.updateTransactions({
        ...args,
        data: {
          ...args.data,

          categoryId: {
            connect: args.data.categoryId,
          },

          userId: args.data.userId
            ? {
                connect: args.data.userId,
              }
            : undefined,

          walletId: {
            connect: args.data.walletId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Transactions)
  @nestAccessControl.UseRoles({
    resource: "Transactions",
    action: "delete",
    possession: "any",
  })
  async deleteTransactions(
    @graphql.Args() args: DeleteTransactionsArgs
  ): Promise<Transactions | null> {
    try {
      return await this.service.deleteTransactions(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Category, {
    nullable: true,
    name: "categoryId",
  })
  @nestAccessControl.UseRoles({
    resource: "Category",
    action: "read",
    possession: "any",
  })
  async getCategoryId(
    @graphql.Parent() parent: Transactions
  ): Promise<Category | null> {
    const result = await this.service.getCategoryId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "userId",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUserId(
    @graphql.Parent() parent: Transactions
  ): Promise<User | null> {
    const result = await this.service.getUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Wallet, {
    nullable: true,
    name: "walletId",
  })
  @nestAccessControl.UseRoles({
    resource: "Wallet",
    action: "read",
    possession: "any",
  })
  async getWalletId(
    @graphql.Parent() parent: Transactions
  ): Promise<Wallet | null> {
    const result = await this.service.getWalletId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
